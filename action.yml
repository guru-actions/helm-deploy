---
apiVersion: automation.cloudbees.io/v1alpha1
kind: action
name: deploy helm chart
description: deploys a helm chart using a standard repo
inputs:
  chart:
    description: chart name
    required: true
  repo:
    description: chart repository
    required: true
  namespace:
    description: namespace to deploy to
    required: true
  release:
    description: name of the release
    required: true
  version:
    description: version of the chart
    required: false
  repousername:
    description: if auth required, the user name to use
    required: false
  repopassword:
    description: if auth required, the user creds to use 
    required: false
  values:
    description: optional values file
    required: false
  args:
    description: optional args
    required: false
  
runs:
  using: composite
  steps:
    - id: deploy_chart
      name: Deploy Chart
      uses: docker://alpine/helm:latest
      shell: sh
      run: |
         _version=""
         _values=""
         _args=""
         tmp_val=./tmpval.txt
         printf "version is [${{ inputs.version }}]\n"
         printf "release is [${{ inputs.release }}]\n"
         if [ "${{ inputs.version }}" != "" ]; then
            _version="--version=${{ inputs.version }}"
            printf "setting specific version ${{ inputs.version }} \n"
         fi

         if [ "${{ inputs.args }}" != "" ]; then
            _args=" ${{ inputs.args }}"
            printf "setting specific arge ${{ inputs.args }} \n"
         fi

         if [ "${{ inputs.values }}" != "" ]; then
            =cat ${{ inputs.version }} > $tmp_val
            _values=" -f $tmp_val "
            
            printf "setting specific version ${{ inputs.version }} \n"
         fi
         
         _auth=""
         if [ "${{ inputs.repousername }}" != "" ] && [ "${{ inputs.repopassword }}" != "" ]; then
           _auth="--username=${{ inputs.repousername }} --password=${{ inputs.repopassword }}"
           printf "setting authentiation for helm repo as user name and credential provided\n"
         fi
         printf "the derived version is $_version\n"
         repo_tmp=$(echo ${{ inputs.chart }} |cut -d/ -f 1)
         helm repo add $repo_tmp ${{ inputs.repo }} $_auth
         
         helm repo list
         helm repo update
         helm search repo
         echo "version is [${{ inputs.version }}]"
         printf "about to run [helm upgrade --install ${{ inputs.release }}  ${{ inputs.chart }} $_version -n ${{ inputs.namespace }}]\n"
         helm upgrade --install ${{ inputs.release }}  ${{ inputs.chart }} $_version -n ${{ inputs.namespace }} $_values $_args
         
